{
  "contract_name": "sendit-xion-contracts",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "protocol_fee_address"
    ],
    "properties": {
      "owner": {
        "type": [
          "string",
          "null"
        ]
      },
      "protocol_fee_address": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "add_seller_level"
        ],
        "properties": {
          "add_seller_level": {
            "type": "object",
            "required": [
              "seller_level_info"
            ],
            "properties": {
              "seller_level_info": {
                "$ref": "#/definitions/SellerLevelInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_seller_level"
        ],
        "properties": {
          "update_seller_level": {
            "type": "object",
            "required": [
              "level_index",
              "seller_level_info"
            ],
            "properties": {
              "level_index": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "seller_level_info": {
                "$ref": "#/definitions/SellerLevelInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "register_seller"
        ],
        "properties": {
          "register_seller": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "stake"
        ],
        "properties": {
          "stake": {
            "type": "object",
            "required": [
              "amount",
              "seller_address"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "seller_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "type": "object",
            "required": [
              "amount",
              "seller_address"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "seller_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "purchase"
        ],
        "properties": {
          "purchase": {
            "type": "object",
            "required": [
              "affiliate_address",
              "amount",
              "product_id",
              "seller_address"
            ],
            "properties": {
              "affiliate_address": {
                "type": "string"
              },
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "product_id": {
                "type": "string"
              },
              "seller_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "review"
        ],
        "properties": {
          "review": {
            "type": "object",
            "required": [
              "product_id",
              "rating",
              "seller_address"
            ],
            "properties": {
              "product_id": {
                "type": "string"
              },
              "rating": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "seller_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "SellerLevelInfo": {
        "type": "object",
        "required": [
          "affiliate_fee_bps",
          "max_days_to_appeal",
          "max_days_to_list",
          "max_product_count",
          "max_product_price_total",
          "payout_hold_days",
          "protocol_fee_bps",
          "review_fee_bps",
          "step_score"
        ],
        "properties": {
          "affiliate_fee_bps": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "max_days_to_appeal": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "max_days_to_list": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "max_product_count": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "max_product_price_total": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "min_stake": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "payout_hold_days": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "protocol_fee_bps": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "review_fee_bps": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "step_score": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_contract_state"
        ],
        "properties": {
          "get_contract_state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_seller_level_list"
        ],
        "properties": {
          "get_seller_level_list": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_seller_level"
        ],
        "properties": {
          "get_seller_level": {
            "type": "object",
            "required": [
              "level_index"
            ],
            "properties": {
              "level_index": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_seller_info"
        ],
        "properties": {
          "get_seller_info": {
            "type": "object",
            "required": [
              "seller_address"
            ],
            "properties": {
              "seller_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_seller_stake"
        ],
        "properties": {
          "get_seller_stake": {
            "type": "object",
            "required": [
              "seller_address",
              "staker_address"
            ],
            "properties": {
              "seller_address": {
                "type": "string"
              },
              "staker_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_contract_state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetContractStateResponse",
      "type": "object",
      "required": [
        "contract_state"
      ],
      "properties": {
        "contract_state": {
          "$ref": "#/definitions/ContractState"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "ContractState": {
          "type": "object",
          "required": [
            "owner",
            "protocol_fee_address"
          ],
          "properties": {
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "protocol_fee_address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_seller_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetSellerInfoResponse",
      "type": "object",
      "required": [
        "seller_info"
      ],
      "properties": {
        "seller_info": {
          "$ref": "#/definitions/SellerInfo"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "SellerInfo": {
          "type": "object",
          "required": [
            "is_banned",
            "level",
            "own_stake",
            "rating",
            "received_stake",
            "sales_amount",
            "sales_volume",
            "total_reviews"
          ],
          "properties": {
            "is_banned": {
              "type": "boolean"
            },
            "level": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "own_stake": {
              "$ref": "#/definitions/Uint128"
            },
            "rating": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "received_stake": {
              "$ref": "#/definitions/Uint128"
            },
            "sales_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "sales_volume": {
              "$ref": "#/definitions/Uint128"
            },
            "total_reviews": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_seller_level": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetSellerLevelResponse",
      "type": "object",
      "required": [
        "seller_level_info"
      ],
      "properties": {
        "seller_level_info": {
          "$ref": "#/definitions/SellerLevelInfo"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "SellerLevelInfo": {
          "type": "object",
          "required": [
            "affiliate_fee_bps",
            "max_days_to_appeal",
            "max_days_to_list",
            "max_product_count",
            "max_product_price_total",
            "payout_hold_days",
            "protocol_fee_bps",
            "review_fee_bps",
            "step_score"
          ],
          "properties": {
            "affiliate_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "max_days_to_appeal": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_days_to_list": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_product_count": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_product_price_total": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "min_stake": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "payout_hold_days": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "protocol_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "review_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "step_score": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_seller_level_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetSellerLevelListResponse",
      "type": "object",
      "required": [
        "seller_level_list"
      ],
      "properties": {
        "seller_level_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SellerLevelInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "SellerLevelInfo": {
          "type": "object",
          "required": [
            "affiliate_fee_bps",
            "max_days_to_appeal",
            "max_days_to_list",
            "max_product_count",
            "max_product_price_total",
            "payout_hold_days",
            "protocol_fee_bps",
            "review_fee_bps",
            "step_score"
          ],
          "properties": {
            "affiliate_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "max_days_to_appeal": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_days_to_list": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_product_count": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_product_price_total": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "min_stake": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "payout_hold_days": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "protocol_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "review_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "step_score": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_seller_stake": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetSellerStakeResponse",
      "type": "object",
      "required": [
        "seller_stake"
      ],
      "properties": {
        "seller_stake": {
          "$ref": "#/definitions/SellerStake"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "SellerStake": {
          "type": "object",
          "required": [
            "stake_amount",
            "unlock_time"
          ],
          "properties": {
            "stake_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "unlock_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}